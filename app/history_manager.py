# -*- coding: utf-8 -*-
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏—è–º–∏ —Ñ–∞–π–ª–æ–≤ (—Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º)
import hashlib
import os
import shutil
import sqlite3
import threading
from datetime import datetime
from pathlib import Path
from typing import List, Tuple, Optional

from PySide6.QtCore import QObject, Signal, Slot, QThread
from PySide6.QtWidgets import QSystemTrayIcon


class ScanWorker(QObject):
    """
    –†–∞–±–æ—á–∏–π, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
    –ú–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–∞–∫ –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ, —Ç–∞–∫ –∏ –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    finished = Signal()
    progress = Signal(str)  # –°–∏–≥–Ω–∞–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–∫–∞–Ω–∏—Ä—É–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
    scan_notification = Signal(str, QSystemTrayIcon.MessageIcon)

    def __init__(self, history_manager, paths_to_scan: List[str]):
        super().__init__()
        self.history_manager = history_manager
        self.paths_to_scan = [Path(p) for p in paths_to_scan]
        self._should_stop = False

    def stop(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
        self._should_stop = True

    def run(self):
         self._should_stop = False
         try:
             self.scan_notification.emit(
                 self.tr("–ù–∞—á–∞–ª–æ—Å—å —Ñ–æ–Ω–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤..."),
                 QSystemTrayIcon.Information
             )
             for path in self.paths_to_scan:
                 if self._should_stop:
                     break
                 if not Path(path).exists():
                     self.scan_notification.emit(
                         self.tr("–ü—É—Ç—å –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω: {0}").format(path),
                         QSystemTrayIcon.Warning
                     )
                     continue
                 for root, _, files in os.walk(Path(path)):
                     if self._should_stop:
                         self.scan_notification.emit(self.tr("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."), QSystemTrayIcon.Warning)
                         break
                     for name in files:
                         if self._should_stop:
                             break
                         file_path = Path(root) / name
                         self.progress.emit(file_path.name) # <-- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è
                         # üîí –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–±–æ–∏ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ, —á—Ç–æ–±—ã –Ω–µ —É—Ä–æ–Ω–∏—Ç—å –≤–µ—Å—å –ø–æ—Ç–æ–∫
                         try:
                             self.history_manager.add_initial_version(file_path)
                         except Exception as e:
                             self.scan_notification.emit(
                                 self.tr("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {0}: {1}").format(file_path, e),
                                 QSystemTrayIcon.Warning
                             )
             if not self._should_stop:
                 self.scan_notification.emit(self.tr("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ."), QSystemTrayIcon.Information)
         except Exception as e:
             # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∞–≤–∞—Ä–∏–π–Ω—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å—Ç—Ä–µ–≤–∞–ª–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
             self.scan_notification.emit(self.tr("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {0}").format(e), QSystemTrayIcon.Critical)
         finally:
             self.finished.emit()


class CleanupWorker(QObject):
    """
    –†–∞–±–æ—á–∏–π, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π –æ—á–∏—Å—Ç–∫—É —Ñ–∞–π–ª–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
    –£–¥–∞–ª—è–µ—Ç –∏–∑ –ë–î –∑–∞–ø–∏—Å–∏ –æ —Ñ–∞–π–ª–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞–ø–∫–∞—Ö.
    """
    finished = Signal()
    progress = Signal(str)
    cleanup_notification = Signal(str, QSystemTrayIcon.MessageIcon)

    def __init__(self, history_manager, watched_paths: List[str]):
        super().__init__()
        self.history_manager = history_manager
        self.watched_paths = [Path(p) for p in watched_paths]
        self._should_stop = False

    def stop(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
        self._should_stop = True

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π –æ—á–∏—Å—Ç–∫—É."""
        self.cleanup_notification.emit(
            self.tr("–ù–∞—á–∞–ª–∞—Å—å —Ñ–æ–Ω–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ñ–∞–π–ª–æ–≤..."),
            QSystemTrayIcon.Information
        )

        # –í—ã–∑—ã–≤–∞–µ–º clean_unwatched_files_in_db, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        messages, files_deleted = self.history_manager.clean_unwatched_files_in_db(
            self.watched_paths,
            lambda: self._should_stop # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        )

        # –ü–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ clean_unwatched_files_in_db (–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ë–î),
        # –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏—Å–ø—É—Å–∫–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
        for msg, icon_type in messages:
            self.cleanup_notification.emit(msg, icon_type)

        if not self._should_stop:
            if files_deleted > 0:
                self.cleanup_notification.emit(
                    self.tr("–§–æ–Ω–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ {0} –∑–∞–ø–∏—Å–µ–π.").format(files_deleted),
                    QSystemTrayIcon.Information
                )
            else:
                self.cleanup_notification.emit(
                    self.tr("–§–æ–Ω–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."),
                    QSystemTrayIcon.Information
                )
        else:
            self.cleanup_notification.emit(
                self.tr("–§–æ–Ω–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."),
                QSystemTrayIcon.Warning
            )

        self.finished.emit()


class HistoryManager(QObject):
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –≤–µ—Ä—Å–∏–π —Ñ–∞–π–ª–æ–≤.
    """
    scan_started = Signal()
    scan_finished = Signal()
    cleanup_started = Signal()
    cleanup_finished = Signal()
    file_list_updated = Signal()
    version_added = Signal(int)
    history_notification = Signal(str, QSystemTrayIcon.MessageIcon)
    scan_progress = Signal(str) # –°–∏–≥–Ω–∞–ª –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞)

    DB_NAME = "metadata.db"
    OBJECTS_DIR = "objects"

    def _calculate_hash(self, file_path: Path) -> str | None:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç SHA-256 —Ö–µ—à —Ñ–∞–π–ª–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ.
        """
        import hashlib
        try:
            sha256 = hashlib.sha256()
            with open(file_path, "rb") as f:
                for chunk in iter(lambda: f.read(8192), b""):
                    sha256.update(chunk)
            return sha256.hexdigest()
        except (OSError, IOError):
            return None


    def __init__(self, storage_path: Path, parent=None):
        super().__init__(parent)
        self.storage_path = storage_path
        self.db_path = self.storage_path / self.DB_NAME
        self.objects_path = self.storage_path / self.OBJECTS_DIR

        self._scan_thread = None
        self._scan_worker = None
        self._is_scan_running = False

        self._cleanup_thread = None
        self._cleanup_worker = None
        self._is_cleanup_running = False

        self._db_connection_lock = threading.RLock()

        self._setup_storage()
        self._db_connection = sqlite3.connect(self.db_path, check_same_thread=False)
        self._db_connection.execute("PRAGMA foreign_keys = ON")
        self._setup_database()

    def _stop_current_scan_worker(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω."""
        if self._is_scan_running and self._scan_worker:
            self._scan_worker.stop()
            if self._scan_thread and self._scan_thread.isRunning():
                self._scan_thread.quit()
                self._scan_thread.wait(2000)

        self._is_scan_running = False
        self._scan_thread = None
        self._scan_worker = None

    def _stop_current_cleanup_worker(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –æ—á–∏—Å—Ç–∫–∏, –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω."""
        if self._is_cleanup_running and self._cleanup_worker:
            self._cleanup_worker.stop()
            if self._cleanup_thread and self._cleanup_thread.isRunning():
                self._cleanup_thread.quit()
                self._cleanup_thread.wait(2000)

        self._is_cleanup_running = False
        self._cleanup_thread = None
        self._cleanup_worker = None

    def start_scan(self, paths_to_scan: List[str]):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ.
        –ï—Å–ª–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –∏–¥–µ—Ç, –æ–Ω–æ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ —Å –Ω–æ–≤—ã–º–∏ –ø—É—Ç—è–º–∏.
        """
        if not paths_to_scan:
            self.history_notification.emit(
                self.tr("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞—á–∞—Ç–æ: –Ω–µ—Ç –ø–∞–ø–æ–∫ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."),
                QSystemTrayIcon.Information
            )
            return

        self._stop_current_scan_worker()
        self._stop_current_cleanup_worker() # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—á–∏—Å—Ç–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞

        self._is_scan_running = True
        self.scan_started.emit()

        self._scan_thread = QThread(self)
        self._scan_worker = ScanWorker(self, paths_to_scan)
        self._scan_worker.moveToThread(self._scan_thread)

        self._scan_thread.started.connect(self._scan_worker.run)
        self._scan_worker.finished.connect(self._scan_thread.quit)
        self._scan_worker.finished.connect(self._scan_worker.deleteLater)
        self._scan_thread.finished.connect(self._scan_thread.deleteLater)
        self._scan_worker.finished.connect(self._on_scan_finished_internal)
        self._scan_worker.scan_notification.connect(self.history_notification)
        self._scan_worker.progress.connect(self.scan_progress) # <-- –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞—Ä—É–∂—É

        self._scan_thread.start()

    @Slot()
    def _on_scan_finished_internal(self):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å–ª–æ—Ç, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
        self._is_scan_running = False
        self.file_list_updated.emit() # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.scan_finished.emit()

    def start_cleanup(self, watched_paths: List[str]):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—á–∏—Å—Ç–∫—É –∏—Å—Ç–æ—Ä–∏–∏ —Ñ–∞–π–ª–æ–≤ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ.
        –ï—Å–ª–∏ –æ—á–∏—Å—Ç–∫–∞ —É–∂–µ –∏–¥–µ—Ç, –æ–Ω–∞ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞.
        """
        self._stop_current_cleanup_worker()
        self._stop_current_scan_worker() # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ

        self._is_cleanup_running = True
        self.cleanup_started.emit()

        self._cleanup_thread = QThread(self)
        self._cleanup_worker = CleanupWorker(self, watched_paths)
        self._cleanup_worker.moveToThread(self._cleanup_thread)

        self._cleanup_thread.started.connect(self._cleanup_worker.run)
        self._cleanup_worker.finished.connect(self._cleanup_thread.quit)
        self._cleanup_worker.finished.connect(self._cleanup_worker.deleteLater)
        self._cleanup_thread.finished.connect(self._cleanup_thread.deleteLater)
        self._cleanup_worker.finished.connect(self._on_cleanup_finished_internal)
        self._cleanup_worker.cleanup_notification.connect(self.history_notification)

        self._cleanup_thread.start()

    @Slot()
    def _on_cleanup_finished_internal(self):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å–ª–æ—Ç, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏."""
        self._is_cleanup_running = False
        self.file_list_updated.emit() # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏
        self.cleanup_finished.emit()


    def add_initial_version(self, file_path: Path):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç '–Ω—É–ª–µ–≤—É—é' –≤–µ—Ä—Å–∏—é —Ñ–∞–π–ª–∞ –≤–æ –≤—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
        –ù–µ –∏—Å–ø—É—Å–∫–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã UI/—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ —Ä–∞–±–æ—á–µ–≥–æ –ø–æ—Ç–æ–∫–∞.
        """
        with self._db_connection_lock:
            cursor = self._db_connection.cursor()
            cursor.execute("SELECT id FROM tracked_files WHERE original_path = ?", (str(file_path),))
            if cursor.fetchone():
                return

            # _add_version_from_path —Ç–µ–ø–µ—Ä—å –Ω–µ –∏—Å–ø—É—Å–∫–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã UI/—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            self._add_version_from_path(file_path)

    @Slot(str)
    def add_file_version(self, file_path_str: str):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ (–∏–∑ FileWatcher, –≤ –µ–≥–æ —Ä–∞–±–æ—á–µ–º –ø–æ—Ç–æ–∫–µ).
        –ò—Å–ø—É—Å–∫–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã UI –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.
        """
        file_path = Path(file_path_str)
        if not file_path.is_file():
            return

        file_hash = self._calculate_hash(file_path)
        if not file_hash:
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∑–¥–µ—Å—å, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ö–µ—à
            self.history_notification.emit(
                self.tr("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ö–µ—à –¥–ª—è —Ñ–∞–π–ª–∞ {0}").format(file_path.name),
                QSystemTrayIcon.Warning
            )
            return

        was_new_file = False
        file_id = -1
        error_message = None # –î–ª—è —Å–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö

        with self._db_connection_lock:
            cursor = self._db_connection.cursor()
            cursor.execute("""
                SELECT v.sha256_hash FROM versions v
                JOIN tracked_files tf ON v.file_id = tf.id
                WHERE tf.original_path = ?
                ORDER BY v.timestamp DESC LIMIT 1
            """, (str(file_path),))
            last_version = cursor.fetchone()

            if last_version and last_version[0] == file_hash:
                return # –§–∞–π–ª –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º

            # _add_version_from_path —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏ ID
            result_tuple = self._add_version_from_path(file_path, file_hash)
            if result_tuple:
                was_new_file, file_id = result_tuple
            else:
                error_message = self.tr("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–µ—Ä—Å–∏—é —Ñ–∞–π–ª–∞ {0}.").format(file_path.name)

        # –ü–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –±–ª–æ–∫–∞ `with self._db_connection_lock:`, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–≤–æ–±–æ–¥–Ω–∞.
        # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏—Å–ø—É—Å–∫–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã GUI.
        if error_message:
            self.history_notification.emit(error_message, QSystemTrayIcon.Critical)
            return

        self.version_added.emit(file_id)
        if was_new_file:
            self.file_list_updated.emit()
            self.history_notification.emit(
                self.tr("–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {0}").format(file_path.name),
                QSystemTrayIcon.Information
            )
        else:
            self.history_notification.emit(
                self.tr("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Ñ–∞–π–ª–∞: {0}").format(file_path.name),
                QSystemTrayIcon.Information
            )

    def get_all_tracked_files(self) -> List[tuple]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ë–î.
        –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π [(id, original_path), ...]
        """
        with self._db_connection_lock:
            cursor = self._db_connection.cursor()
            cursor.execute(
                "SELECT id, original_path FROM tracked_files ORDER BY original_path ASC"
            )
            return cursor.fetchall()

    def get_versions_for_file(self, file_id: int) -> List[tuple]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ file_id.
        –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π [(timestamp, sha256_hash, file_size), ...]
        """
        with self._db_connection_lock:
            cursor = self._db_connection.cursor()
            cursor.execute("""
                SELECT timestamp, sha256_hash, file_size
                FROM versions
                WHERE file_id = ?
                ORDER BY timestamp DESC
            """, (file_id,))
            return cursor.fetchall()

    def get_object_path(self, sha256_hash: str) -> Path | None:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É-–æ–±—ä–µ–∫—Ç—É –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ –µ–≥–æ —Ö–µ—à—É.
        """
        object_path = self.objects_path / sha256_hash[:2] / sha256_hash[2:]
        if object_path.exists():
            return object_path
        return None

    def _add_version_from_path(self, file_path: Path, precalculated_hash: str = None) -> Optional[Tuple[bool, int]]:
        """
        –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ —Ñ–∞–π–ª–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –ë–î.
        –ù–ï –ò–°–ü–£–°–ö–ê–ï–¢ –°–ò–ì–ù–ê–õ–´ UI. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (was_new_file, file_id) –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
        """
        was_new_file = False
        file_id = -1

        file_hash = precalculated_hash or self._calculate_hash(file_path)
        if not file_hash:
            # –í—ã–∑—ã–≤–∞—é—â–∏–π –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
            return None

        try:
            file_size = file_path.stat().st_size
        except FileNotFoundError:
            # –í—ã–∑—ã–≤–∞—é—â–∏–π –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É FileNotFoundError
            return None
        except OSError:
            # –í—ã–∑—ã–≤–∞—é—â–∏–π –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É OSError
            return None

        object_subdir = self.objects_path / file_hash[:2]
        object_path = object_subdir / file_hash[2:]
        if not object_path.exists():
            try:
                object_subdir.mkdir(exist_ok=True)
                shutil.copy2(file_path, object_path)
            except IOError:
                # –í—ã–∑—ã–≤–∞—é—â–∏–π –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É IOError –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏
                return None

        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –≤—ã–∑—ã–≤–∞—é—â–∏–π –º–µ—Ç–æ–¥ —É–∂–µ –¥–µ—Ä–∂–∏—Ç –µ–µ
        cursor = self._db_connection.cursor()

        cursor.execute("SELECT id FROM tracked_files WHERE original_path = ?", (str(file_path),))
        file_id_result = cursor.fetchone()

        if not file_id_result:
            was_new_file = True
            cursor.execute("INSERT INTO tracked_files (original_path) VALUES (?)", (str(file_path),))
            file_id = cursor.lastrowid
        else:
            file_id = file_id_result[0]

        timestamp = datetime.now().isoformat()
        cursor.execute(
            "INSERT INTO versions (file_id, timestamp, sha256_hash, file_size) VALUES (?, ?, ?, ?)",
            (file_id, timestamp, file_hash, file_size)
        )
        try:
            self._db_connection.commit()
            return was_new_file, file_id
        except sqlite3.Error:
            self._db_connection.rollback()
            # –í—ã–∑—ã–≤–∞—é—â–∏–π –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É SQLite
            return None

    def clean_unwatched_files_in_db(self,
                                    current_watched_paths_as_paths: List[Path],
                                    should_stop_callback=None) -> Tuple[List[Tuple[str, QSystemTrayIcon.MessageIcon]], int]:
        """
        –£–¥–∞–ª—è–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–∏ –æ —Ñ–∞–π–ª–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è
        –Ω–∏ –≤ –æ–¥–Ω–æ–π –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞–ø–æ–∫.
        –ù–µ –∏—Å–ø—É—Å–∫–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã UI. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
        """
        messages = []
        files_deleted_count = 0
        file_ids_to_delete = []

        with self._db_connection_lock:
            cursor = self._db_connection.cursor()
            cursor.execute("SELECT id, original_path FROM tracked_files")
            all_tracked_files = cursor.fetchall()

            for file_id, original_path_str in all_tracked_files:
                if should_stop_callback and should_stop_callback():
                    messages.append((self.tr("–û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."), QSystemTrayIcon.Warning))
                    return messages, files_deleted_count # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ, —á—Ç–æ –µ—Å—Ç—å

                original_path = Path(original_path_str)
                is_watched = False
                for watched_path in current_watched_paths_as_paths:
                    try:
                        if original_path.resolve().is_relative_to(watched_path.resolve()):
                            is_watched = True
                            break
                    except RuntimeError as e:
                        messages.append((self.tr("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—É—Ç–∏ {0}: {1}").format(original_path_str, e), QSystemTrayIcon.Warning))
                        is_watched = True # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø—É—Ç—å –≤–∞–∂–µ–Ω, —á—Ç–æ–±—ã –Ω–µ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –ø–æ –æ—à–∏–±–∫–µ
                        break
                    except Exception as e:
                        messages.append((self.tr("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—É—Ç–∏ {0}: {1}").format(original_path_str, e), QSystemTrayIcon.Critical))
                        is_watched = True
                        break

                if not is_watched:
                    file_ids_to_delete.append(file_id)
                    messages.append((self.tr("–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {0}").format(original_path.name), QSystemTrayIcon.NoIcon)) # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ç—Ä–µ–µ

            if file_ids_to_delete:
                try:
                    cursor.execute(f"DELETE FROM versions WHERE file_id IN ({','.join(map(str, file_ids_to_delete))})")
                    cursor.execute(f"DELETE FROM tracked_files WHERE id IN ({','.join(map(str, file_ids_to_delete))})")
                    self._db_connection.commit()
                    files_deleted_count = len(file_ids_to_delete)
                    messages.append((self.tr("–£–¥–∞–ª–µ–Ω–æ {0} –∑–∞–ø–∏—Å–µ–π –æ —Ñ–∞–π–ª–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è.").format(files_deleted_count), QSystemTrayIcon.Information))
                except sqlite3.Error as e:
                    messages.append((self.tr("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î: {0}").format(e), QSystemTrayIcon.Critical))
                    self._db_connection.rollback()
            else:
                messages.append((self.tr("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏."), QSystemTrayIcon.Information))

        return messages, files_deleted_count

    def _setup_storage(self):
        try:
            self.storage_path.mkdir(parents=True, exist_ok=True)
            self.objects_path.mkdir(exist_ok=True)
        except OSError as e:
            self.history_notification.emit(
                self.tr("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {0}").format(e),
                QSystemTrayIcon.Critical
            )

    def _setup_database(self):
        with self._db_connection_lock:
            try:
                cursor = self._db_connection.cursor()
                cursor.execute("CREATE TABLE IF NOT EXISTS tracked_files (id INTEGER PRIMARY KEY, original_path TEXT NOT NULL UNIQUE)")
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS versions (
                        id INTEGER PRIMARY KEY, file_id INTEGER NOT NULL, timestamp TEXT NOT NULL,
                        sha256_hash TEXT NOT NULL, file_size INTEGER NOT NULL,
                        FOREIGN KEY (file_id) REFERENCES tracked_files (id) ON DELETE CASCADE
                    )""")
                cursor.execute("CREATE INDEX IF NOT EXISTS idx_tracked_files_path ON tracked_files (original_path)")
                cursor.execute("CREATE INDEX IF NOT EXISTS idx_versions_file_id ON versions (file_id)")
                self._db_connection.commit()
            except sqlite3.Error as e:
                self.history_notification.emit(
                    self.tr("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {0}").format(e),
                    QSystemTrayIcon.Critical
                )

    def close(self):
        self._stop_current_scan_worker()
        self._stop_current_cleanup_worker()
        if self._db_connection:
            with self._db_connection_lock:
                self._db_connection.close()
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ë–î, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –Ω–µ –Ω—É–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è
            # self.history_notification.emit(
            #     self.tr("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ."),
            #     QSystemTrayIcon.Information
            # )
